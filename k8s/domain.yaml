# Copyright 2017, 2019, Oracle Corporation and/or its affiliates. All rights reserved.

# Licensed under the Universal Permissive License v 1.0 as shown at http://oss.oracle.com/licenses/upl.
#
# This is an example of how to define a Domain resource.
#
apiVersion: "weblogic.oracle/v2"
kind: Domain
metadata:
  name: sample-domain1
  namespace: sample-domain1-ns
  labels:
    weblogic.resourceVersion: domain-v2
    weblogic.domainUID: sample-domain1
spec:
  # The WebLogic Domain Home
  domainHome: /u01/oracle/user_projects/domains/sample-domain1
  # If the domain home is in the image
  domainHomeInImage: true
  # The WebLogic Server Docker image that the Operator uses to start the domain
  # 2019.01.23. - FROM phx.ocir.io/weblogick8s/pnagy:wls.12.2.1.3.0.op.rc2
  # image: "peternagy/angular-java-creditscore:449a9d4df89a31468cf058c8e1a439c9148bbc1d"
  # 2019.01.23. - FROM store/oracle/weblogic:12.2.1.3
  image: "peternagy/angular-java-creditscore:2312c2f00032dcc9c66141342490a7eb2678ac80"
  #
  # imagePullPolicy defaults to "Always" if image version is :latest IfNotPresent
  imagePullPolicy: "Always"
  # Identify which Secret contains the credentials for pulling an image
  imagePullSecrets:
  - name: dockersecret
  # Identify which Secret contains the WebLogic Admin credentials (note that there is an example of
  # how to create that Secret at the end of this file)
  webLogicCredentialsSecret:
    name: sample-domain1-weblogic-credentials
  # Whether to include the server out file into the pod's stdout, default is true
  includeServerOutInPodLog: true
  # Whether to enable log home
  # logHomeEnabled: false
  # The in-pod location for domain log, server logs, server out, and Node Manager log files
  # logHome: /shared/logs/domain1
  # serverStartPolicy legal values are "NEVER", "IF_NEEDED", or "ADMIN_ONLY"
  # This determines which WebLogic Servers the Operator will start up when it discovers this Domain
  # - "NEVER" will not start any server in the domain
  # - "ADMIN_ONLY" will start up only the administration server (no managed servers will be started)
  # - "IF_NEEDED" will start all non-clustered servers, including the administration server and clustered servers up to the replica count
  serverStartPolicy: "IF_NEEDED"
  #`restartVersion: "domainV1"
  serverPod:
    # an (optional) list of environment variable to be set on the servers
    env:
    - name: JAVA_OPTIONS
      value: "-Dweblogic.StdoutDebugEnabled=false -Dweblogic.debug.DebugSituationalConfig=true -Dweblogic.debug.DebugSituationalConfigDumpXml=true"
    - name: USER_MEM_ARGS
      value: "-Xms64m -Xmx256m "
    # volumes:
    # - name: weblogic-domain-storage-volume
    #   persistentVolumeClaim:
    #     claimName: domain1-weblogic-sample-pvc
    # volumeMounts:
    # - mountPath: /shared
    #   name: weblogic-domain-storage-volume
  # adminServer is used to configure the desired behavior for starting the administration server.
  adminServer:
    # serverStartState legal values are "RUNNING" or "ADMIN"
    # "RUNNING" means the listed server will be started up to "RUNNING" mode
    # "ADMIN" means the listed server will be start up to "ADMIN" mode
    serverStartState: "RUNNING"
    adminService:
      channels:
    # The Admin Server's NodePort
       - channelName: default
         nodePort: 30701
    # Uncomment to export the T3Channel as a service
       - channelName: T3Channel
  # clusters is used to configure the desired behavior for starting member servers of a cluster.
  # If you use this entry, then the rules will be applied to ALL servers that are members of the named clusters.
  clusters:
  - clusterName: cluster-1
    serverStartState: "RUNNING"
    maxUnavailable: 1
    replicas: 1
  # The number of managed servers to start for unlisted clusters
  # replicas: 1
  configOverrides: jdbccm
  configOverrideSecrets: [dbsecret]
